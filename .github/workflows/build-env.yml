name: Build RKE2 Cloud
defaults:
  run:
    shell: bash -ileo pipefail {0}

on:
  push:
    branches:
      - prod

jobs:
  build:
    runs-on: self-hosted  # Run directly on the host, NOT in a container

    env:
        TF_API_TOKEN: ${{ secrets.TFE_TOKEN }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform Backend
        run: |
          cat > backend.tf << EOF
          terraform { 
              backend "remote" { 
                  organization = "${{ github.repository_owner }}"
                  workspaces { 
                      name = "k8s-cluster" 
                  } 
              } 
          }
          EOF

      - name: Configure Terraform Credentials
        run: |
          mkdir -p ~/.terraform.d
          cat <<EOF > ~/.terraform.d/credentials.tfrc.json
          {
            "credentials": {
              "app.terraform.io": {
                "token": "${TF_API_TOKEN}"
              }
            }
          }
          EOF

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init 

      - name: Terraform Destroy
        run: |
          terraform destroy -auto-approve

      - name: Build cluster
        run: |
            echo $(pwd)
            sudo /bin/bash
            echo $(pwd)
            echo $SSH_AUTH_SOCK


            ls -al $SSH_AUTH_SOCK
            ssh-add -L
            terraform apply -auto-approve 
            # PIDS=$(ps -aef | grep "[g]pg-agent" | awk '{print $2}'); [[ -n "$PIDS" ]] && echo "Found gpg-agent running with PIDs: $PIDS" && sudo kill -KILL $PIDS 2>/dev/null || true && sleep 1 && PIDS_REMAINING=$(ps -aef | grep "[g]pg-agent" | awk '{print $2}') && [[ -z "$PIDS_REMAINING" ]] && echo "✅ gpg-agent successfully terminated." || echo "⚠️ Some gpg-agent processes are still running: $PIDS_REMAINING" || echo "✅ No gpg-agent processes found running."
            # ps -aef | grep gpg-agent
            # OUT=$(gpg-agent --homedir ~/.gnupg --daemon --enable-ssh-support)
            # echo $OUT
            # eval $OUT
            # echo $SSH_AUTH_SOCK
            # sudo chmod 777 $SSH_AUTH_SOCK
            # echo $SSH_AUTH_SOCK
            # gpg-connect-agent updatestartuptty /bye
            # sudo chown $(whoami) $(gpgconf --list-dirs agent-ssh-socket)
            # GPG_AGENT_SOCK=$(gpgconf --list-dirs agent-socket)
            # echo "GPG Agent Socket: $GPG_AGENT_SOCK"
            # gpg-connect-agent -S "$GPG_AGENT_SOCK" reloadagent /bye
            sudo ./setup.sh

