name: Build RKE2 Cloud

on:
  push:
    branches:
      - prod

jobs:
  buildx:
    runs-on: self-hosted
    container:
      image: ubuntu:latest
      options: --privileged
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock  # Grant access to Docker
        - /var/run/libvirt:/var/run/libvirt

    env:
        TF_API_TOKEN: ${{ secrets.TFE_TOKEN }}

    steps:
        - name: Install Dependencies
          run: |
            apt-get update
            apt-get install -y \
              libvirt-clients \
              libvirt-daemon \
              libvirt-daemon-system \
              qemu-kvm \
              curl \
              gnupg \
              software-properties-common \
              lsb-release \
              nodejs \
              unzip
            curl -fsSL https://apt.releases.hashicorp.com/gpg | apt-key add -
            apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
            apt-get update && apt-get install -y terraform
            ls -al /var/run/libvirt

        - name: Checkout Repository
          uses: actions/checkout@v3

        - name: Setup Terraform Backend
          run: |
            cat > backend.tf << EOF
            terraform { 
                backend "remote" { 
                    organization = "${{ github.repository_owner }}"

                    workspaces { 
                        name = "k8s-cluster" 
                    } 
                } 
            }
            EOF

        - name: Configure Terraform Credentials
          run: |
            mkdir -p ~/.terraform.d
            cat <<EOF > ~/.terraform.d/credentials.tfrc.json
            {
              "credentials": {
                "app.terraform.io": {
                  "token": "${TF_API_TOKEN}"
                }
              }
            }
            EOF

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v3

        - name: Terraform Init
          run: terraform init 

        - name: Teardown Cluster
          run: terraform destroy -auto-approve

        - name: Debug Libvirt Connection
          run: |
              echo "Checking Libvirt socket..."
              ls -l /var/run/libvirt/libvirt-sock
              echo "Testing virsh connection..."
              virsh -c qemu:///system list --all
              echo "Checking Terraform Libvirt connection..."
              mkdir -p test
              echo 'provider "libvirt" { uri = "qemu+unix:///system?socket=/var/run/libvirt/libvirt-sock" }' > test/main.tf
              echo 'data "libvirt_pool" "default" { name = "default" }' >> test/main.tf
              echo 'output "pool_id" { value = data.libvirt_pool.default.id }' >> test/main.tf

              cd test  # Move into the Terraform module directory

              terraform init
              terraform apply -auto-approve -target=data.libvirt_pool.default
              terraform destroy -auto-approve -target=data.libvirt_pool.default
              rm -rf test

        - name: Apply Terraform Configuration
          run: terraform apply -auto-approve

        - name: Setup Cluster
          run: |
            echo $TF_API_TOKEN | terraform login app.terraform.io
            ./setup.sh
